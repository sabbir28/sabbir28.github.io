class FirebaseAuthentication{constructor(e){this.apiKey=e,this.authUrl=`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${e}`,this.loginUrl=`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${e}`,this.verifyEmailUrl=`https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=${e}`,this.passwordResetUrl=`https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=${e}`,this.deleteUserUrl=`https://identitytoolkit.googleapis.com/v1/accounts:delete?key=${e}`,this.emailChangeUrl=`https://identitytoolkit.googleapis.com/v1/accounts:update?key=${e}`}async createUser(e,r){const s={email:e,password:r,returnSecureToken:!0},o=await fetch(this.authUrl,{method:"POST",body:JSON.stringify(s)}),t=await o.json();if("idToken"in t){return{success:!0,idToken:t.idToken,email:t.email,refreshToken:t.refreshToken,expiresIn:t.expiresIn,localId:t.localId}}return{success:!1,error_code:t.error.code,error_message:t.error.message,error_details:t.error.errors}}async loginUser(e,r){const s={email:e,password:r,returnSecureToken:!0},o=await fetch(this.loginUrl,{method:"POST",body:JSON.stringify(s)}),t=await o.json();if("idToken"in t){return{success:!0,idToken:t.idToken,email:t.email,refreshToken:t.refreshToken,expiresIn:t.expiresIn,localId:t.localId}}return{success:!1,error_code:t.error.code,error_message:t.error.message,error_details:t.error.errors}}async sendEmailVerification(e){const r={requestType:"VERIFY_EMAIL",idToken:e},s=await fetch(this.verifyEmailUrl,{method:"POST",body:JSON.stringify(r)}),o=await s.json();if("emailVerified"in o&&o.emailVerified)return{success:!0};if("error"in o){return{success:!1,error_code:o.error.code,error_message:o.error.message,error_details:o.error.errors}}return{success:!1,error_message:"Unknown error",json_is:o}}async sendPasswordResetEmail(e){const r={requestType:"PASSWORD_RESET",email:e},s=await fetch(this.passwordResetUrl,{method:"POST",body:JSON.stringify(r)}),o=await s.json();if("email"in o)return{success:!0};return{success:!1,error_code:o.error.code,error_message:o.error.message,error_details:o.error.errors}}async deleteUser(e){const r={idToken:e},s=await fetch(this.deleteUserUrl,{method:"POST",body:JSON.stringify(r)});if(200===s.status)return{success:!0};{const e=await s.json();return{success:!1,error_code:e.error.code,error_message:e.error.message,error_details:e.error.errors}}}async changeEmail(e,r){const s={idToken:e,email:r,returnSecureToken:!0},o=await fetch(this.emailChangeUrl,{method:"POST",body:JSON.stringify(s)}),t=await o.json();if("email"in t)return{success:!0};return{success:!1,error_code:t.error.code,error_message:t.error.message,error_details:t.error.errors}}async getUserData(e){const r=`https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=${this.apiKey}`,s={idToken:e},o=await fetch(r,{method:"POST",body:JSON.stringify(s)}),t=await o.json();if(t.users&&t.users.length>0){const e=t.users[0];return{success:!0,email:e.email,displayName:e.displayName}}return{success:!1,error_code:t.error.code,error_message:t.error.message}}}
